# Tripvota Cursor Rules

## Monorepo Layout
- `typescript-workspace`: ConnectRPC-based frontend packages and apps.
- `rust-workspace`: Rust backend services.
- `share/proto`: Single source of truth for protobuf definitions.

## Protobuf Workflow
1. Edit or add `.proto` files in `share/proto`.
2. After proto changes, regenerate the TypeScript bindings by running `pnpm --filter @workspace/proto-gen generate` from `typescript-workspace`. This updates the generated sources in `packages/proto-gen/src`.
3. Commit the updated generated TypeScript files when the API change should be consumed by other packages.
4. Rust services do not require a manual generation stepâ€”the bindings are recreated on build via `rust-workspace/apps/server/build.rs` using `axum_connect_build`.

## ConnectRPC Usage Notes
- Aim for backward-compatible protobuf changes so both frontend and backend stay in sync.
- Frontend code should import generated ConnectRPC clients and types from `packages/proto-gen`.
- Backend code relies on the build-script regeneration; ensure builds are run after proto updates to pick up the latest definitions.

